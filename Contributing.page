How to write a patch ?
----------------------

See the official documentation which describes how the Nix expression
language works so that you can update existing packages and add new
ones.

-   [Nix
    manual](http://hydra.nixos.org/job/nix/trunk/tarball/latest/download-by-type/doc/manual)
-   [Nixpkgs
    manual](http://hydra.nixos.org/job/nixpkgs/trunk/tarball/latest/download-by-type/doc/manual),
    in particular [Coding
    conventions](http://hydra.nixos.org/job/nixpkgs/trunk/tarball/latest/download-by-type/doc/manual#chap-conventions)
-   [NixOS
    manual](http://hydra.nixos.org/job/nixos/trunk/manual/latest/download)

I have a patch
--------------

Thanks. Send it to the mailinglist so that we can discuss and apply it,
or open a pull request on github.

If your change breaks things don't scream if someone reverts it. It
happens. The best thing to do is to fix your patch. Try to check first
if it will cause a lot of rebuilds and add a note to your pull request
if you have already tested everything.

How to send a git pull request
------------------------------

       # git commit your change
       # add your github clone as remote location:
       YOUR_GITHUB_NAME=fill-in
       git remote add $YOUR_GITHUB_NAME "git@github.com:$YOUR_GITHUB_NAME/nixpkgs.git"
     
       # create a topic branch, so that this change can be submitted independently from other things:
       git checkout -tb submit/your-topic-name
       git push $YOUR_GITHUB_NAME submit/your-topic-name
       # goto gituhb.com/your_name -> create pull request

Why create your own branch? You can follow upstream (master) by running
"git merge master". You can "git commit --amend" fixes and "git push -f"
your branch.

For long living topic branches you may want to read
[Nixpkgs\_and\_TopGit](//Nixpkgs and TopGit)

How to verify that you didn't break a dependency or the evaluation by accident ?
--------------------------------------------------------------------------------

To find out which packages are effected by your change:

    $ nix-env -f . -qaP \* --drv-path | sort > l1
    (...modify package...)
    $ nix-env -f . -qaP \* --drv-path | sort > l2
    $ changed=$(diff l1 l2 | awk '{print $2}' | sort | uniq)

    # This list can be used to create a release.nix for testing, or you can build all the relevant packages:
    $ nix-build $(for i in $changed; do echo -A $i; done)

    #!/bin/sh
    set -e -x

    export NIXOS=${NIXOS:-/etc/nixos/nixos}
    export NIXPKGS_ALL=${NIXPKGS_ALL:-/etc/nixos/nixpkgs}

    # evaluate all derivations found in all-packages.nix:
    nix-env -qa '*' --show-trace -P --out-path -f $NIXPKGS_ALL/pkgs/top-level/all-packages.nix

    # evaluate all derivations found in release.nix before starting the build:
    # nix-env -qa '*' $NIXPKGS_ALL/pkgs/top-level/release.nix
    # nix-instantiate --readonly-mode $NIXPKGS_ALL/pkgs/top-level/release.nix --show-trace

    # build a release tarball which contains the most important packages (?)
    nix-build -A tarball $NIXOS/release.nix --show-trace

TODO: explain what is done exactly

 The nixpkgs-dev-utilities referenced on [Nix(OS) related repositories
and work](//Nix(OS) related repositories and work) tries to implement
this for your convinience

merging git pull requests
-------------------------

hitting the "merge" button on github is fine, however doing

       curl 'patch url' | git am; git push

is finer, because history will be cleaner.

check if there are any evaluation errors wit your distribution
--------------------------------------------------------------

    nix-instantiate --eval-only --strict --xml -A <packagename>
