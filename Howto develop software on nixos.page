what is this?
-------------

say you develop a program using the kdevelop IDE. the software you are
developing uses cmake, qt and is managed using git. in that case you
need need a toolchain in your environment composed of this components:

-   cmake
-   qt4
-   make
-   compiler

unlike other linux or unix systems, on nixos, a normal environment used
by any user on the system does not contain such tools at all. that means
if you type `make` in a normal shell you will get an error that there is
no program called make.

however keep in mind that on nixos you can install several different
versions of a single library on the same system.

**this guide describes how to build an environment for development which
contains all the tools needed!**

**note:** since svn revision 33421 the naming scheme has changed, for
newly installed environments this means you have to type:
**load-env-sdl** instead of load-sdl-env

there are two ways achiving this:

-   AAA with support of the package manager
-   BBB where things have to be put together manually

AAA changing into an environment using the package manager
----------------------------------------------------------

     nix-shell [--command /bin/sh] nvi

to get the build environment of the package nvi running code in an
interactive shell.

Additional info
<https://github.com/NixOS/nix/commit/7f38087f35e6f74a73bfdb28da8acd8930565d51>

BBB manual cloning of an environment not using the package manager
------------------------------------------------------------------

the nix expression, `nixpkgs/pkgs/misc/my-env/default.nix`, is intended
to be used by a normal user. just open the mentioned file with the text
editor of choice and look at the comments (which should basically the
same described here in this wiki page), so read on.

### a simple example \~/.nixpkgs/config.nix

this file contains the user configuration for one or more custom
environments. let's create it:

     $ mkdir ~/.nixpkgs

ensure that the config.nix contains something like:

     $ cat config.nix
     {
       packageOverrides = pkgsÂ : with pkgs; {
         sdlEnv = pkgs.myEnvFun {
             name = "sdl";
             buildInputs = [ stdenv SDL SDL_image SDL_ttf SDL_gfx cmake SDL_net pkgconfig ];
         };
       };
     }

by following the installation procedure of our new custom environment,
also found in /etc/nixos/nixpkgs/pkgs/misc/my-env/default.nix, one can
extend his standard environment by the desired new environment.

     $ nix-env -i env-sdl

using this new environment:

     $ load-env-sdl

to verify that the new environment got all tools needed, type:

     $ make

and verify that the tool is there.

### how to use that environment

after the new environment has loaded you can use the tools as if you
were on ubuntu or debian linux where all the tools are available
throughout the whole system once they have been installed. note that on
other shells you won't have these tools, so you also have to change the
environment if you want them to have the tools as well.

loading the environment

     [joachim@eliteBook-8530w:~/Desktop/projects]$ load-env-sdl
     env-sdl loaded

using sdl-config to get the cflags

     sdl:[joachim@eliteBook-8530w:~/Desktop/projects]$ sdl-config --cflags
     -I/nix/store/652x8hnhja32z3ja4hip04ygn8mh9cwi-SDL-1.2.14/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT

using sdl-config to get the library postition

     sdl:[joachim@eliteBook-8530w:~/Desktop/projects]$ sdl-config --libs
     -L/nix/store/652x8hnhja32z3ja4hip04ygn8mh9cwi-SDL-1.2.14/lib -Wl,-rpath,/nix/store/652x8hnhja32z3ja4hip04ygn8mh9cwi-SDL-1.2.14/lib -lSDL -lpthread

in the `Makefile` of your sdl using project you usually call sdl-config
to get these values and paths.

**note: the exact path might differ from mine as you might have a
different hash**

### another example

<http://invalidmagic.wordpress.com/2012/03/23/developing-software-using-nixos/>

other related topics
--------------------

### how to use libraries which don't have a sdl-config or don't use pkgconfig

when you load `load-env-sdl` there will be some additional environment
variables set:

-   CMAKE\_PREFIX\_PATH
-   NIX\_CFLAGS\_COMPILE
-   NIX\_LDFLAGS

all these variables contain include paths and ldflags used by the
compiler.

**note: the load-env-sdl using sdl is just an example here, however the
mentioned environment variables can be used for various libraries which
don't even use sdl-config like tools.**

**note: once these paths are set correctly (caused by the
load-env-whateverYourEnvironmentIsCalled command) you would not depend
on tools like sdl-config or pkgconfig. this helps to get libraries
working which don't use these kind of tools to make them accessible.**

### code completion in kdevelop

kdevelop has code completion but it requires the source of the used
libraries of course. On NixOS these libraries however reside in the
/nix/store and are therefore more or less very strange compared to other
distributions.

To have full code completion in kdevelop you need this procedure:

1.  rm -Rf myCustomProject/build/\*
2.  load-env-sdl (where the project would use cmake)
3.  start 'kdevelop' from that shell
4.  import the CMakeLists.txt of the project
5.  kdevelop asks where to build the project -\> chose the default
    myCustomProject/build
6.  build the selection
7.  afterwards there should be code completion for the whole project

What might not work is that you can open several projects in this
kdevelop session. But that should be a minor issue i guess.

sample development environments
-------------------------------

### Python development environment

       {
         # Define a myEnvFun environment, which makes use of pythonPlone
         packageOverrides = pkgs: rec {
        
           # Define a version of python which has access to all the Plone modules
           pythonPlone = pkgs.pythonFull.override {
             extraLibs = with pkgs.python27Packages; [ Plone ];
           };
        
           plone = pkgs.myEnvFun {
             name = "plone";
             buildInputs = with pkgs; [
               pythonPlone
               python27Packages.zc_buildout_nix
               stdenv # provides gcc for building python c extensions
            ];
            # Export the path to the custom version of python with all the goodies
            # Other python command line utilies could also be used, e.g. IPython
            extraCmds = 
              export PYTHONHOME=${pythonPlone}
              unset http_proxy # otherwise downloads will fail ("nodtd.invalid")
            ;
           };
        
         };
       }

summary
-------

it is easy to add several different environments to
`~/.nixpkgs/config.nix` and these can then be used, one at a time, for
development. one can exit from such an environment using `CTRL+D` or
simply by typing `exit` as it is realized as a sub-shell (similar to
typing bash inside a shell).

the main benefit is that you do not pollute your main profile with
development tools and that you can use several different versions of a
library on the same system (main nix advantage) but accessible from
within different environments.

