This tutorial covers the major points of NixOS configuration. In this
tutorial, we configure NixOS to start an IRC client every time the OS
starts. This tutorial will start by adding this functionality to the
`configuration.nix` file. Then, this functionality is extracted into a
separate file, which NixOS calls a "module".

Example Introduction
====================

Suppose you want to start an IRC client and connect to your favorite
channel every time your NixOS starts. To do this, we will start the IRC
client using a shell command. In other distributions, to perform an
action on system start, you place the shell command in an init script,
which is usually the `/etc/init.d` file.

In NixOS, on the other hand, all system files are overwritten when the
`configuration.nix` file is updated and the system is rebuilt. How does
a NixOS user execute a shell command on system start? In NixOS, all
dependencies are clean and organized, which means they are changed in a
single place - the `configuration.nix` and the modules it loads. To
change the system's behavior, then, we must add this IRC shell command
to this configuration file.

Simple Implementation - In Main Configuration File
==================================================

Lets start the IRC session using `irssi` as the IRC client. We'll run it
inside a `screen` daemon, which enables the IRC session to continue even
after we log out of our shell session.

To implement this, we can add the following code to the
`/etc/nixos/configuration.nix` file:

    {pkgs, ...}:

    # pkgs is used to fetch screen & irssi.
     
    {
      jobs.ircSession = {
        description = "Start the irc client of username."
        startOn = "started network-interfaces";
        exec = /var/setuid-wrappers/sudo -u username -- ${pkgs.screen}/bin/screen -m -d -S irc ${pkgs.irssi}/bin/irssi;
      };

      environment.systemPackages = [ pkgs.screen ];
      security.sudo.enable = true;

      # ... usual configuration ...
    }

What does this do? The `jobs.ircSession` bit is a configuration option
which creates system services. You can see a list of all NixOS
configuration options in the [NixOS Manual: List of
Options](http://nixos.org/nixos/manual/#ch-options). Then, we add
attributes, which are parameters used to start this new service. This
system service will start when the network connects, and it will execute
the specified command.

After rebuilding the NixOS configuration with this file, our IRC session
should start when our network connects. The IRC session is started as a
child to the screen daemon, which is independent of any user's session
and will continue running when we log out. To connect to the IRC
session, we reconnect to the screen session and go to the IRC window.
Here's the command:

    ssh username@my-server -t screen -d -R irc

Conditions
==========

The user has another computer similar to his server. He wants to re-use
his server configuration, because most of the hardware is similar. To
avoid duplicating everything, he decides to use the host name of the
computer to enable or disable services. He rewrites his
`configuration.nix` file with the `mkIf` property.

    {config, pkgs, ...}:

    {
      jobs = pkgs.lib.mkIf (config.networking.hostname == "my-server") {
        ircSession = {
          description = "Start the irc client of username."
          startOn = "started network-interfaces";
          exec = ''/var/setuid-wrappers/sudo -u username -- ${pkgs.screen}/bin/screen -m -d -S irc ${pkgs.irssi}/bin/irssi'';
        };
      };

      environment.systemPackages = pkgs.lib.mkIf (config.networking.hostname == "my-server") [ pkgs.screen ];
      security.sudo.enable = (config.networking.hostname == "my-server");

      # ... usual configuration ...
    }

 This code seems to fit his expectations, but many conditions have to be
introduced and this will become harder to maintain over time e.g. when
he wants to change his server host name.

Multiple Configurations
=======================

To avoid the complexity of the previous mixing done inside his
`configuration.nix` file, he decides to split his configuration over
multiple files where each concern is separated into its own file. He
keeps the configuration.nix file as his general configuration for both
computers and moves the rest into a file named `irc-client.nix`.

The contents of his `configuration.nix` file becomes:

    {
      require = [
        ./irc-client.nix
      ];

      # ... usual configuration ...
    }

and the contents of the `irc-client.nix` file becomes:

    {config, pkgs, ...}:

    pkgs.lib.mkIf (config.networking.hostname == "my-server") {
      jobs.ircSession = {
        description = "Start the irc client of username."
        startOn = "started network-interfaces";
        exec = ''/var/setuid-wrappers/sudo -u username -- ${pkgs.screen}/bin/screen -m -d -S irc ${pkgs.irssi}/bin/irssi'';
      };

      environment.systemPackages = [ pkgs.screen ];
      security.sudo.enable = true;
    }

This way, the complexity of changing the condition is reduced. In
addition, he can discover consistency issues within the `irc-client.nix`
file which makes this file maintainable.

Sharing Configuration
=====================

The user has discussed his configuration on irc and some other person
wants to benefits form his modification. Thus he has to remove all parts
which are dependent on his system and make it more general. So he
decides to replace the condition and the username by options.

He modifies irc-client.nix to look like this:

    {config, pkgs, ...}:

    let
      cfg = config.services.ircClient;
    in

    with pkgs.lib;

    {
      options = {
        services.ircClient = {
          enable = mkOption {
            default = false;
            type = with types; bool;
            description = ''
              Start an irc client for a user.
            '';
          };

          user = mkOption {
            default = "username";
            type = with types; uniq string;
            description = ''
              Name of the user.
            '';
          };
        };
      };

      config = mkIf cfg.enable {
        jobs.ircSession = {
          description = "Start the irc client of ${cfg.user}."
          startOn = "started network-interfaces";
          exec = ''/var/setuid-wrappers/sudo -u ${cfg.user} -- ${pkgs.screen}/bin/screen -m -d -S irc ${pkgs.irssi}/bin/irssi'';
        };

        environment.systemPackages = [ pkgs.screen ];
        security.sudo.enable = true;
      };
    }

This module is now independent of the system and the user can modify his
`configuration.nix` to get his previous configuration.

    {config, ...}:

    {
      require = [
        ./irc-client.nix
      ];

      services.ircClient.enable = config.networking.hostname == "my-server";
      services.ircClient.user = "username";

      # ... usual configuration ...
    }

Multiple Daemons
================

The user now hosts multiple person on his server, and they want to have
the same irc client running in background. One easy possibility would be
to replace the user name by a list of user names, but this would not add
more value in this tutorial. Another solution is to extend jobs with the
irc client options. This will extend the options available inside
`jobs.<name>`.

    {config, pkgs, ...}:

    let
      anyIrcClient = with pkgs.lib;
        fold (j: v: v || j.ircClient.enable) (attrValues config.jobs);
    in

    with pkgs.lib;

    {
      options = {
        jobs.options = {config, ...}: let
          cfg = config.ircClient;
        in {
          options = {
            ircClient.enable = mkOption {
              default = false;
              type = with types; bool;
              description = ''
                Start an irc client for a user.
              '';
            };

            ircClient.user = mkOption {
              default = "username";
              type = with types; uniq string;
              description = ''
                Name of the user.
              '';
            };
          };

          config = mkIf cfg.enable {
            description = "Start the irc client of ${cfg.user}."
            startOn = "started network-interfaces";
            exec = ''/var/setuid-wrappers/sudo -u ${cfg.user} -- ${pkgs.screen}/bin/screen -m -d -S irc ${pkgs.irssi}/bin/irssi'';
          };
        };
      };

      config = mkIf anyIrcClient {
        environment.systemPackages = [ pkgs.screen ];
        security.sudo.enable = true;
      };
    }

Test your modules in a Virtual Machine with build-vm
====================================================

To test your new service in a VM create a file e.g. my-new-service.nix:

    {config, pkgs, ...}:
    {
      # You need to configure a root filesytem
      fileSystems."/".label = "vmdisk";

      # The test vm name is based on the hostname, so it's nice to set one
      networking.hostName = "vmhost"; 

      # Add a test user who can sudo to the root account for debugging
      users.extraUsers.vm = {
        password = "vm";
        shell = "${pkgs.bash}/bin/bash";
        group = "wheel";
      };
      security.sudo = {
        enable = true;
        wheelNeedsPassword = false;
      };

      # Enable your new service!
      services =  {
        myNewService = {
          enable = true;
        };
      };
    }

Then you can build a vm for testing:

    $ NIXOS_CONFIG=`pwd`/vmtest.nix nixos-rebuild  -I nixos=/path/to/nixos/ build-vm

... and run it:

    $ ./result/bin/run-vmhost-vm

... work in progress ...

