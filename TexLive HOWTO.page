[[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=1 "Edit section: TexLive HOWTO")] TexLive HOWTO
------------------------------------------------------------------------------------------------------------

### [[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=2 "Edit section: TexLive components")] TexLive components

There is a "core" texlive component and some additional components:

-   nixpkgs\_sys.texLiveContext
-   nixpkgs\_sys.texLiveBeamer
-   nixpkgs\_sys.texLiveCMSuper
-   nixpkgs\_sys.texLive
-   nixpkgs\_sys.texLiveExtra
-   nixpkgs\_sys.texLiveLatexXColor
-   nixpkgs\_sys.texLivePGF

<!-- -->

     nixpkgs_sys.texLive

is the "core" component, other components add fonts/styles and extra
functionalities.

### [[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=3 "Edit section: The problem")] The problem

-   Extra tex components install extra functionalities in locations that
    are unknown to the core component (as the core component obviously
    does not depend on extra components).
-   After installing an extra component, a texlive user will notice that
    the extra functionalities are not found by texlive binaries (i.e.
    latex)
-   There is a file called "ls-R" that should contain all the
    tex-related files, and this file should be updated after an extra
    component is installed.
-   Another way is to add the .../texmf-dist// directories of extra
    components into the TEXINPUTS environment variable, i.e. on my
    system:

<!-- -->

     export TEXINPUTS="./:/nix/store/d6xw1wangjq75dw7grh5d9318687hfhi-texlive-extra-2009/texmf-dist//:"

would just solve the issue without much hassle. However, each time you
upgrade/add an optional texlive component, you should update the
TEXINPUTS environment variable, and this is bad.

### [[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=4 "Edit section: The Solution ...")] The Solution ...

Instead of explicitly install texLive components via
/etc/nixos/configuration.nix (environment.systemPackages) or nix-env -i,
one should write a nix-expression using the following function:

     texLiveAggregationFun

cfr. <http://www.mail-archive.com/nix-dev@cs.uu.nl/msg00996.html> and
<http://www.mail-archive.com/nix-dev@cs.uu.nl/msg00998.html>

#### [[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=5 "Edit section: ... using /etc/nixos/configuration.nix")] ... using /etc/nixos/configuration.nix

Edit /etc/nixos/configuration.nix and add (or edit, if
environment.systemPackages is already set):

     environment = {
       systemPackages = [
         ...
         (pkgs.texLiveAggregationFun { paths = [ pkgs.texLive pkgs.texLiveExtra pkgs.texLiveBeamer ]; })
         ...
       ];
       ...
     };

the "let myTexLive =" will introduce a new nix-expression using
texLiveAggregationFun { paths = [ all\_your\_texLive\_components\_here
]; }. the (let myTexLive = ... in myTexLive) will actually evaluate the
function upon a nixos-rebuild switch command. After a nixos-rebuild
switch, all the specified texLive components will be built and their
texmf-dist// scanned, resulting in an environment with a full working
texlive + optional components setup.

#### [[edit](/w/index.php?title=TexLive_HOWTO&action=edit&section=6 "Edit section: ... using ~/.nixpkgs/config.nix")] ... using \~/.nixpkgs/config.nix

Create (or edit) the file \~/.nixpkgs/config.nix to contain the
following code:

     {
       packageOverrides = pkgs:
       {
         myTexLive = with pkgs; texLiveAggregationFun {
           paths = [ texLive texLiveExtra texLiveBeamer ];
         };
       };
     }

 and install with

     nix-env -i -A myTexLive
