Some programs need information which is only available at runtime, such
as dynamically linked libraries, files, or environment variable values.
How are these libraries found? Well, the solution depends on the host
system. Because Nix is a non-standard system, when an application runs
in a Nix system, it may not be able to find some things at runtime.

While Nix provides a well-defined build-time environment, an
application's runtime environment is a relatively unconsidered problem.
As a result, a Nix package does not explicitly prompt a package creator
to describe a program's expected runtime environment. Lacking native
support of runtime modifications in a Nix package, the Nix community
created a shell script named `makeWrapper` to solve this problem.
Documentation for this package follows.

[[edit](/w/index.php?title=Nix_Runtime_Environment_Wrapper&action=edit&section=1 "Edit section: MakeWrapper Package")] MakeWrapper Package
------------------------------------------------------------------------------------------------------------------------------------------

The [`makeWrapper`
package](https://github.com/NixOS/nixpkgs/blob/41840af6894bf718a1038ba1045adef26a687919/pkgs/build-support/setup-hooks/make-wrapper.sh)
adds a shell function, `wrapProgram`, which will ensure the specified
program has the specified environment when it is executed. This package
consists of a single shell script,
[`makeWrapper.sh`](https://github.com/NixOS/nixpkgs/blob/41840af6894bf718a1038ba1045adef26a687919/pkgs/build-support/setup-hooks/make-wrapper.sh).

To use the `makeWrapper` function in a package, first include the
`makeWrapper` package in the `buildInputs` attribute. Then, use the
`makeWrapper` shell function somewhere in the build process, such as in
the "postInstall" phase. For documentation on these functions and
examples, see below.

[[edit](/w/index.php?title=Nix_Runtime_Environment_Wrapper&action=edit&section=2 "Edit section: Shell Functions")] Shell Functions
----------------------------------------------------------------------------------------------------------------------------------

**`wrapProgram(String programPath, List<String> environmentExpressions)`**

Rename the executable file at the specified program path and create a
wrapper program in its place which executes the original executable file
in an environment which is modified based on the specified environment
expressions.

The specified file is renamed by prepending a dot "." and appending
"-wrapped" to the original file name. For example, "myprog" will be
renamed to ".myprog-wrapped".

Each environment expression consists of an operator and one, two, or
three arguments, depending on the operator. The supported operators are
documented on this wiki page.

**`makeWrapper(String originalProgramPath, String wrapperScriptPath, List<String> environmentExpressions)`**

Build an executable shell script at the specified wrapper path which
uses the specified environment expressions to modify the current shell
environment before executing the specified original program.

Each environment expression consists of an operator and one, two, or
three arguments, depending on the operator. The supported operators are
documented on this wiki page.

**`addSuffix(String suffix, List<String> values)`**

Append the specified suffix to each of the specified values.

**`filterExisting(List<String> filePaths)`**

Remove all files from the specified file paths which do not exist.

### [[edit](/w/index.php?title=Nix_Runtime_Environment_Wrapper&action=edit&section=3 "Edit section: Environment Expression Operators and Arguments:")] Environment Expression Operators and Arguments:

Each environment expression consists of an operator and one, two, or
three arguments, depending on the operator.

**`--set envVarName varValue`**

Set the specified environment variable to the specified value.

**`--run command`**

Execute the specified command.

**`--suffix envVarName separator value`**

Append the specified value to the specified environment variable,
placing the specified separator between the old and new values.

**`--prefix envVarName separator value`**

Prepend the specified value to the specified environment variable,
placing the specified separator between the old and new values.

**`--suffix-each envVarName separator values`**

Append the specified values to the specified environment variable,
placing the specified separator between each old and new value.

**`--suffix-contents envVarName separator fileNames`**

Append the contents of the specified files to the specified environment
variable, placing the specified separator between the contents of each
file.

**`--prefix-contents`**

Prepend the contents of the specified files to the specified environment
variable, placing the specified separator between the contents of each
file.

**`--add-flags flag`**

Use the specified flags when executing the original program.

*`(remaining arguments)`*

All remaining arguments are considered flags to use when executing the
original program.

[[edit](/w/index.php?title=Nix_Runtime_Environment_Wrapper&action=edit&section=4 "Edit section: Examples")] Examples
--------------------------------------------------------------------------------------------------------------------

The [KMPlayer
package](https://github.com/NixOS/nixpkgs/blob/f305fe1c02b223463af9263a9800fc6b606527db/pkgs/applications/video/kmplayer/default.nix)
uses `wrapProgram` to ensure the package's `bin` directory is in the
`PATH` variable when it is executed.

        postInstall = ''
          wrapProgram $out/bin/kmplayer --suffix PATH : ${mplayer}/bin
        '';

The [Duplicity
package](https://github.com/NixOS/nixpkgs/blob/80452891996797c54677ca16ca9a8caea2d11e72/pkgs/tools/backup/duplicity/default.nix)
uses multiple environment expressions.

        installPhase = ''
          python setup.py install --prefix=$out
          wrapProgram $out/bin/duplicity \
            --prefix PYTHONPATH : "$(toPythonPath $out):$(toPythonPath ${boto})" \
            --prefix PATH : "${gnupg}/bin:${ncftp}/bin"
          wrapProgram $out/bin/rdiffdir \
            --prefix PYTHONPATH : "$(toPythonPath $out):$(toPythonPath ${boto})" \
        '';

The [Firefox Plugin
Wrapper](https://github.com/NixOS/nixpkgs/blob/41840af6894bf718a1038ba1045adef26a687919/pkgs/applications/networking/browsers/firefox/wrapper.nix)
demonstrates advanced useage by using the `makeWrapper` packages's
utility functions: `addSuffix` and `filterExisting`.

        makeWrapper "${browser}/bin/${browserName}" \
            "$out/bin/${browserName}${nameSuffix}" \
            --suffix-each MOZ_PLUGIN_PATH ':' "$plugins" \
            --suffix-each LD_LIBRARY_PATH ':' "$libs" \
            --suffix-each LD_PRELOAD ':' "$(cat $(filterExisting $(addSuffix /extra-ld-preload $plugins)))" \
            --prefix-contents PATH ':' "$(filterExisting $(addSuffix /extra-bin-path $plugins))"
