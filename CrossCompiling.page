News in allpackages.nix
=======================

The main nix package now has a parameter setting the information for the
cross-compilation target. When set, this will allow us to cross-build:

    ...
    , crossSystemÂ ? null
    ...

This *crossSystem* should be an attribute set with enough information
about the target. Therefore it cannot be passed through "--argstr
crossSystem mytarget", and it should be written in a nix file apart. For
example, we can use this 'arm.nix':

    import ./default.nix   # The root nixpkgs default.nix
    {
        crossSystem = {
            config = "armv5tel-unknown-linux-gnueabi";  
            bigEndian = false;
            arch = "arm";
            float = "soft";
        };
    }

New stdenv.mkDerivation
=======================

New derivations
---------------

The attribute set resulting from a stdenv.mkDerivation call returns the
usual result comming from a usual native build, with two additional
attributes: - hostDrv - the derivation cross-built - buildDrv - the
derivation built in for the build system (a usual native build).

Thus, these calls equivalently build the native derivation for 'bison'
(mentioning the 'arm.nix' above):

    nix-build -A bison default.nix
    nix-build -A bison arm.nix
    nix-build -A bison.buildDrv arm.nix

If we want to cross-build bison for the arm target described above, we
can run:

    nix-build -A bison.hostDrv arm.nix

New buildInputs
---------------

In the attribute set mkDerivation expect as parameters, the usual
buildInputs got a new meaning when building hostDrv derivations, and a
new buildNativeInputs got introduced, making a total of:

-   buildNativeInputs: derivations built for the build system (native
    builds), needed for the actual cross-build.
-   buildInputs: derivations built for the host-system (to be run in the
    target), needed for the actual cross-build.
-   propagatedBuildInputs: in addition to being a dependency of the
    current built, this derivation built for the host-system will be an
    input for any derivation requiring the actual host derivation being
    built.
-   propagatedBuildNativeInputs: in addition to being a dependency of
    the current built, this derivation built for the build-system
    (native build) will be an input for any derivation requiring the
    actual host derivation being built.

For usual derivations in the native build, buildInputs and
buildNativeInputs get merged and built for the native system, and
analogous for propagatedBuildInputs and propagatedBuildNativeInputs.

New variables in the builder
----------------------------

In the *environment variables* the derivation builder will receive when
asking for the hostDrv to be built, there will be the new variable
**\$crossConfig** defined to the GNU Configuration triplet set in the
crossSystem nixpkgs parameter.

What are we testing
===================

Derivations
-----------

-   xorg.xeyes
-   bison
-   uboot (this derivation is actually meant for a sheevaplug u-boot)

GNU Configurations
------------------

-   armv5tel-unknown-linux-gnueabi
-   armv5tel-unknown-linux-uclibceabi (still not working well due to a
    util-linux-ng bug)

Actual problems to be solved
============================

-   gcc 4.4.2 cannot be bootstrapped, because building the bare-metal
    (without libc or os) first gcc fails. This does not happen in 4.4.1
    or 4.4.3(svn)
-   Adding other libc than glibc:
    -   For uclibc, gcc 4.3.4 needed a patch on libmudflap running a the
        host CPP instead of the target, on "configure". [SOLVED]
    -   util-linux-ng fails detecting the lack of TLS support in uclibc.
        [Bug
        reported](http://marc.info/?l=util-linux-ng&m=125983442420782&w=2)

