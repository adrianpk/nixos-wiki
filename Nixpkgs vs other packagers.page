I want a package installed in the system
----------------------------------------

In most distributions, asking for a package to be installed, means
having all its files available in the root filesystem
(/{,usr}/{bin,etc,lib,sbin}).

In nixpkgs, the installed files of a package go into a *profile* (as if
it was a rootfs), and you can have as many profiles as you want. There
is the notion of each user having at least one profile, so
\`\~/.nix-profile\` points to the last version of the profile the user
chose (last generation).

By default, the only part of the system made aware of the contents of
the user profile is the PATH. The user PATH is set through bashrc to
include \`\~/.nix-profile/bin\`. So, by default, installing a nixpkgs
program means "having it in the PATH". A simple operation like "nix-env
-i firefox" is meant to update the nix store, then generate a new
profile in the store having all the programs *installed* plus the new
one, and updating the symlink \`\~/.nix-profile\`, so
\`\~/.nix-profile/bin\` will contain a symlink to the executable of
firefox. Then a user can type \`firefox\` and have it running.

If other kind of files are to be found by programs looking at the usual
\`/{,usr}/{bin,etc,lib,sbin}\` locations, other variables may be of
help. For example, gcc would welcome CPATH and LIBRARY\_PATH. And the
dynamic loader will welcome LD\_LIBRARY\_PATH.

I want to download an arbitrary source, and build it
----------------------------------------------------

In most LSB distributions, you ask for the development tools to be
installed into the system. And then you also install dependencies of the
package you want to build, and then go on building the source you
downloaded. The dependencies are found, and your program builds fine.

In nixpkgs, you can install the needed development tools into your
profile (gcc-wrapper, gnumake), and the dependencies for the source you
want to build (libpng, qt, ...). Once that done, set the environment
variables (for gcc): CPATH=\~/.nix-profile/include;
LIBRARY\_PATH=\~/.nix-profile/lib; QTDIR=\~/nix-profile ... And then you
should get your build running

I want to install a program from source
---------------------------------------

In most LSB distributions, you proceed like the section above to build
the program, and then run "make install" to get it into /usr/local,
overwritting any files you had there.

Using nixpkgs, if you built your program like the section above, you may
end up having /usr/local files depending on dynamic libraries only
present in your profile. That situation may require a LD\_LIBRARY\_PATH
variable, or your ld.so.conf pointing to your profile, but this
situation can end in your programs not working if you remove those
dependencies from your profile. This would be also a problem in your LSB
distribution, if you remove uninstall packages required by programs you
put manually in /usr/local.

I want all the nix advantages installing a program from source
--------------------------------------------------------------

A common situation is that LSB distribution users want to keep their
habits, but they additionally want the advantages claimed by nix, to
mention some:

1.  rollback
2.  disable any possibility of removing dependencies of an installed
    program
3.  no side effects to other users (if desired), when installing
    programs
4.  no effects for the own user (have the program installed in the
    store, but not referenced in the profile)

That can be achieved only following the nix style. So, letting nix build
your program from source, instead of doing that on your own in your
interactive shell through profiles. Nix will provide a common build
system, with whatever stated dependencies available at build time, and
will also provide a target installation directory. This requires knowing
how to write a [stdenv
derivations](http://hydra.nixos.org/job/nix/trunk/tarball/latest/download-by-type/doc/manual/#id460419simple),
and knowing where to write them (TBD).

