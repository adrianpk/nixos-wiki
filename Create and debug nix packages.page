this wiki page describes **how to work with nixos/nixpkgs/...**:

     https://github.com/nixos

basics
------

say you are running nixos using nixpkgs and you want to make a change,
update a package, add a new package etc. First you need to clone the
NixOS repositories:

     $ cd $HOME/code/
     $ mkdir code; cd code
     $ git clone https://github.com/NixOS/nixpkgs
     $ git clone https://github.com/NixOS/nixos

Now you have two local repositories: nixpkgs and nixos

Our workflow is similar to the diaspora documented one, so have a
glimpse there as well:

     https://github.com/diaspora/diaspora/wiki/Git-Workflow

how to install from the local repository
----------------------------------------

this section tells you how to apply changes to your current system based
on your local repositories:

**example:** list all available software from the **local repository
\~/code/nixpkgs**

     $ NIX_PATH="nixos=$HOME/code/nixpkgs" nix-env -f '<nixos>' -qa '*'

**example:** install python-urlgrabber from the local repository

     $ NIX_PATH="nixos=$HOME/code/nixpkgs" nix-env -f '<nixos>' -i python-urlgrabber

**example:** update the system based on your local **\~/code/nixos** and
**\~/code/nixpkgs**

     $ nixos-rebuild -I nixos=~/code/nixos -I nixpkgs=~/code/nixpkgs switch

**example:** build an expression and put the output in to
\`pwd\`/results

     $ nix-build ~/code/nixpkgs -A irssi

**example:** get an environment which is used to build irssi

     $ nix-build ~/code/nixpkgs --run-env -A irssi

**example:** get an persistent environment which is used to build irssi

     $ nix-build ~/code/nixpkgs --run-env -A irssi --add-root

git
---

### git rebase

     git pull upstream master

now after some modifications ...

     git add foo
     git commit
     git fetch upstream master
     git pull --rebase upstream master
     git push upstream

### theory: keeping in sync with hydra builds

problem: if you use a local git checkout of nixos/nixpkgs's **upstream
master** to develop software with, you might end up in compiling a lot
when doing: **nixos-rebuild switch**. this happens for example when
there is a fundamental change which requires a lot of packages to be
rebuilt. It is even likely that you hit bugs/issues which are caused by
someone else.

Ideally **you want to change the state of your current system** which
means that **you will not work on upstream/master** but **on the state
of the channel** which is known to be pretty stable.

A channel is only updated if a hydra build job succeeded, that means
(compared to using a local upstream/master git checkout of
nixos/nixpkgs) if you type **nix-env -i firefox**

    * you might get an older binary substitute if the hydra build of the new expression hasn't finished yet
    * you might get an older binary substitute if the hydra build of a newer version failed

#### how does this work

you need this script, edit for your own paths and branches:

     https://raw.github.com/chaoflow/skel/master/bin/update-nixos-channel-branches.sh

verify that the nix-channel is called nixos, looks like this:

     # nix-channel --list
     nixos http://nixos.org/releases/nixos/channels/nixos-unstable

 how to use the script:

     $ nix-channel --update
     $ cd ~/code
     $ (cd nixos && git pull --rebase)
     $ (cd nixpkgs && git pull --rebase)
     $ create_tags_from_nixos_channel.sh
       Using revision file:
         /nix/var/nix/profiles/per-user/root/channels/nixos/nixos/svn-revision
       nixos revision:   b609ff4
       nixpkgs revision: a780984
        
       nixos: git tag nixos-channel-2012-07-21-19-09 b609ff4
       nixpkgs: git tag nixos-channel-2012-07-21-19-09 a780984

 \~/code contains nixos and nixpkgs as subdirs

     $ ls -l ~/code
     total 8K
     drwxr-xr-x 9 cfl cfl 4096 Jul 15 07:02 nixos/
     drwxr-xr-x 6 cfl cfl 4096 Jul 15 04:01 nixpkgs/

nix channels
------------

nix channels can be used in parallel with your new local repositories,
see its
[nix-channel-documentation](//Install/remove software#nix-channels)

