this wiki page describes **how to work with nixos/nixpkgs/...**:

     https://github.com/nixos

basics
------

say of are running nixos using nixpkgs. if you want to change parts of
your system you need to use git:

     $ cd $HOME/code/
     $ mkdir code; cd code
     $ git clone https://github.com/NixOS/nixpkgs
     $ git clone https://github.com/NixOS/nixos

now you have two local repositories: nixpkgs and nixos

our workflow is similar to the diaspora documented one, so have a
glimpse there as well:

     https://github.com/diaspora/diaspora/wiki/Git-Workflow

how to install from the local repository
----------------------------------------

this section tells you how to apply changes to your current system based
on your local repositories:

**example:** list all available software from the **local repository
\~/code/nixpkgs**

     $ NIX_PATH="nixos=$HOME/code/nixpkgs" nix-env -f '<nixos>' -qa '*'

**example:** install python-urlgrabber from the local repository

     $ NIX_PATH="nixos=$HOME/code/nixpkgs" nix-env -f '<nixos>' -i python-urlgrabber

**example:** update the system based on your local **\~/code/nixos** and
**\~/code/nixpkgs**

     $ nixos-rebuild -I nixos=~/code/nixos -I nixpkgs=~/code/nixpkgs switch

**example:** build an expression and put the output in to
\`pwd\`/results

     $ nix-build ~/code/nixpkgs -A irssi

**example:** get an environment which is used to build irssi

     $ nix-build --run-env -A irssi

**example:** get an persistent environment which is used to build irssi

     $ nix-build --run-env -A irssi --add-root

git
---

### git rebase

     git pull upstream master

now after some modifications ...

     git add foo
     git commit
     git fetch upstream master
     git pull --rebase upstream master
     git push upstream

### keeping in sync with hydra builds

problem: if you use **upstream master** to develop software with, you
might end up in compiling a lot when doing: **nixos-rebuild switch**.
this happens for example when there is a fundamental change which
requires a lot of packages to be rebuild. it is even likely that you hit
bugs/issues which are caused by someone else.

ideally **you want to change the state of your current system** which
means that **you will not work on upstream/master** but **on the state
of the channel** which is basically is an intermediate nixpkgs/nixos
state.

    * if hydra built all the nix expressions found in upstream/master then the channel is in sync with upsteam/master
    * if hydra has a lot of jobs in the queue then it might lagg behind and then the channel is not in sync with upstream/master

    + you are up2date
    + lots of recent packages might not have a binary substitute by hydra
    - 

nix channels
------------

nix channels can be used in parallel with your new local repositories,
see its
[nix-channel-documentation](//Install/remove software#nix-channels)

