There are many possible encrypted root setups. This guide is for setting
up LVM over Luks, which is an easy and safe setup that will satisfy most
users. Other setups should still be sufficiently similar.

Important
---------

Here you will find \*only\* NixOS-specific bits. For general information
regarding this setup, how to partition disks and such refer to
[[1]](http://wiki.archlinux.org/index.php/System_Encryption_with_LUKS_for_dm-crypt)
or other detailed guide.

### recent changes

Llu�s Batlle i Rossell changed some luks related bits, so now it is:

If you had:

boot.initrd.luksRoot = "/dev/sda2";

Then now you have to write:

boot.initrd.luks.enable = true;

boot.initrd.luks.devices = [ [ {ame = "luksroot"; device = "/dev/sda2";
} ]

onfig
-----

    this example we assume that:

-   

your **boot partition** is **/dev/sda1** and

-   

your **luks-encrypted partition** is **/dev/sda2** that contains the LVM
volume group "vg".

is is what needs to be put into /etc/nixos/configuration.nix:

### ake sure initrd finds and mounts the root partition


    If you need to decrypt additional devices, you can do it like this:
    <pre>
      boot.initrd.postDeviceCommands = "cryptsetup luksOpen /dev/sda3 lukshome";
    </

te: NixOS currently does support additional devices but only in
combination with using "boot.initrd.luksRoot". That means if you only
want to have an encrypted /home you still have to assign a
boot.initrd.luksRoot="foobar" which preferably should not exist at all.
This also means that you will get an error every boot as this device
does not exist for obvious reasons.

possible fix would be to change
/etc/nixos/nixos/modules/system/boot/luksroot.nix like this:

     boot.initrd.preLVMCommands = 

       # Wait for luksRoot to appear, e.g. if on a usb drive.

       # XXX: copied and adapted from stage-1-init.sh - should be

       # available as a function.

       if [ [{l{ksRoot} != "postBootOnly" ]; then

            if ! test -e ${l{ksRoot}; then

                echo -n "waiting for device ${l{ksRoot} to appear..."

                for ((try = 0; try < <0; try++)); do

                    sleep 1

                    if test -e ${l{ksRoot}; then break; fi

                    echo -n "."

                done

                echo "ok"

            fi

            # open luksRoot and scan for logical volumes

            cryptsetup luksOpen ${l{ksRoot} luksroot

       fi

     ;

W ile using boot.initrd.luksRoot="postBootOnly".

### xtra modules you might need

pending on the encryption algorithm you have chosen for your Luks
volume, you will probably need to ensure kernel has the necessary crypto
modules.

    you are unsure which ones, run

\< \<precryptsetup luksDump /dev/sda2 \</pre\>

What you are looking for is this:

    LUKS header information for /dev/sda2

    Version:        1
    Cipher name:    aes
    Cipher mode:    cbc-essiv:sha256
    Hash spec:      sha1
    </

    this example you need SHA1, SHA256, AES, and CBC.

u can put the required crypto modules into initrd along with dm\_crypt
module needed by Luks like this: \< \<preboot.initrd.kernelModules =
["dm\_crypt" "aes-i586" "sha256" "sha1" "cbc"]; \</pre\>

On my 64bit system (2.6.32) I needed this modules instead the listed
above:

    boot.initrd.kernelModules = ["dm_crypt" "sha256_generic" "sha1_generic" "cbc" "aes_x86_64" "aes_generic" "xts" ];
    </

 te that some USB keyboards also need special kernel support, which must
be available in the init ramdisk to enter the pass phrase. Recent models
of the Microsoft Internet keyboard, for example, need the module
\<c\<de\>hid\_microsoft\</\<ode\> in order to be recognized as an input
device.

### oot Filesystem

\<


    == Mounting from a rescue system ==
    Within the rescue system:
    <pre>
      # cryptsetup luksOpen /dev/sda2 crypt
      # vgscan
      # vgchange -ay
    </

w your logical volumes should be available. X X: written from memory,
please correct or remove this sentence.

