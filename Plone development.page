How to use Nix to create Plone development environment
======================================================

All files can also be downloaded from following gist:
<https://gist.github.com/garbas/5293558>

In above gist there is also script called "install\_nix.sh" which might
help you with setting up Nix.

For rest of the steps It is assumed you already installed Nix on your
system.

Quickstart
----------

1\. Download gist from link above

2\. (optional) In case you don't have Nix install you can use
"install\_nix.sh" to install it.

3\. Run "make" in folder you extracted Gist files

4\. Depending on your connection (\~5min fast, \~20min slow) Plone 4.3
(at the time of writing this HowTo) will be installed. Start Plone with
"bin/instance fg".

What actually happened above?
-----------------------------

Gist from above contains few files:

    - buildout.cfg
    - plone.nix
    - Makefile

"buildout.cfg" is actually a normal buildout configuration file we are
used in Plone already. Only thing special about it that we have to pin
few eggs to specific versions (look at versions section).

    [buildout]
    extends = http://dist.plone.org/release/4.3/versions.cfg
    eggs-directory = eggs
    versions = versions
    unzip = true
    parts =
    instance

    [instance]
    recipe = plone.recipe.zope2instance
    user = admin:admin
    debug-mode = on
    verbose-security = on
    eggs =
        Pillow
        Plone

    [versions]
    zc.buildout = 1.7.1
    distribute = 0.6.34

"plone.nix" is nix expression where we define which things should be
installed for us by nix. Expression below tells to use Python 2.7, Plone
and some other eggs which are listed under "paths".

    { }:

    let
        pkgs = import <nixpkgs> { };
    in

    with pkgs;

    buildEnv {
        name = "plone-env";
        paths = [
            python27
            python27Packages.distribute
            python27Packages.recursivePthLoader
            python27Packages.virtualenv
            plone43Packages.plone
            plone43Packages.pillow
            plone43Packages.mailinglogger
            plone43Packages.plone_recipe_zope2instance
            plone43Packages.zc_recipe_egg
        ] ++ lib.attrValues python27.modules;
    }

"Makefile". Convinient place to gather commands but essantially what
happends when you run make is:

1\. Download (if not already downloaded) all nix packages listed in
"plone.nix" and create profile in current folder called "nixenv". On
NixOS you don't need to export NIX\_PATH.

       NIX_PATH=~/.nix-defexpr/channels nix-build --out-link nixenv plone.nix

2\. Using virtualenv command which you installed from previous command
create python virtual environment.

       ./nixenv/bin/virtualenv --distribute --clear .

3\. Make sure virtual environment we created in previous step sees all
eggs we installed with nix (in step 1).

       echo ../../../nixenv/lib/python2.7/site-packages > lib/python2.7/site-packages/nixenv.pth

4\. Use this weird easy\_install feature that creates binaries if it
doesn't exists already even if egg is already installed.

       ./bin/easy_install -H "" zc.buildout

5\. "bin/buildout" command created in previous step and you use it like
you would with any other buildout installation.

       bin/buildout

6\. "bin/buildout" should create "bin/instance" or whatever you specified
in "buildout.cfg" and by running "bin/instance fg" you'll start Plone in
foreground mode.

       bin/instance fg

Conclusion
----------

Above example should work cross-platform on Darwin(OSX)/Linux/FreeBSD.
I(garbas) tested Linux and OSX 10.8.

How to use myEnvFun and buildout-nix to create a plone development environment
==============================================================================

A similar procedure could be used for any python program. All binaries
such as lxml and PIL will be provided by nix, and you can still use
buildout for installing extra packages, development and testing.
Eventually, it will be possible to install and configure plone as a
NixOS module.

When you've set it up and installed it, you can then load the
environment and hack away. Think of virtualenv, except way more awesome!
The \`load-env-plone\` script will drop you into a subshell, so ctrl-d
will return you to the normal shell, and you can reload it again later.
The environment will stay exactly the same until you explicitly update
it, then you will probably need to run whatever build scripts you need
for your custom stuff. If you use buildout, then the custom version of
buildout: \`buildout-nix\` will try to clean up some things for you and
otherwise take advantage of nix. Remember though, that your development
code is managed outside of nix, so it is subject to the normal whims of
build tools.

1\. Add these sections to \~/.nixpkgs/config.nix:

    {

      # Define a version of python which has access to all the Plone modules
      pythonPlone = pkgs.pythonFull.override {
         extraLibs = with pkgs.python27Packages; [ Plone ];
      };

      # Define a myEnvFun environment, which makes use of pythonPlone
      # You can 
      packageOverrides = pkgs: {
        plone = pkgs.myEnvFun {
          name = "plone";
          buildInputs = with pkgs; [
            pythonPlone
            python27Packages.zc_buildout_nix
            stdenv # provides gcc for building python c extensions
         ];
         # Export the path to the custom version of python with all the goodies
         # Other python command line utilies could also be used, e.g. IPython
         extraCmds = ''
           export PYTHONHOME=${pythonPlone}
         '';
        };

      };
    }

2\. Install it: \`nix-env -i env-plone\`

3\. Activate it:

    $ load-env-plone
    env-plone loaded

    plone:[goibhniu@macha:~/Projects/Plone]$

4\. Create a buildout.cfg:

    [buildout]
    extends = http://dist.plone.org/release/4.3/versions.cfg
    eggs-directory = eggs
    versions = versions
    unzip = true
    parts = instance

    [instance]
    recipe = plone.recipe.zope2instance
    user = admin:admin
    debug-mode = on
    verbose-security = on
    eggs =
        Plone

    [versions]
    distribute = 0.6.34
    # If you get any version conflict errors when running buildout, pin the version here
    zc.buildout = 2.2.0
    Zope2 = 2.13.20
    setuptools = 0.9.8
    ZConfig = 2.9.1
    zc.lockfile = 1.0.2
    zope.tales = 3.5.3
    pytz = 2013b
    docutils = 0.8.1
    Products.ZCTextIndex = 2.13.4

4\. Run buildout-nix

    $ buildout-nix

You should now be able to start an instance as normal:

    ./bin/instance fg

You may need to

    unset http_proxy

to be able to download packages from the internet (you'll see errors
about nodtd.invalid).

NOTE: buildout-nix is a patched version of buildout 2.2.0, which
symlinks to required eggs in the nix store instead of copying them to
./eggs. Eggs which aren't found in the environment will be downloaded
and installed to ./eggs as you would expect. If you wish to debug an egg
in the store e.g. by adding a pdb statement, you can simply replace the
symlink with a copy of the egg and change the permissions so that it is
writable.

